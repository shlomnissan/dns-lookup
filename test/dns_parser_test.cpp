// Copyright 2022 Betamark Pty Ltd. All rights reserved.
// Author: Shlomi Nissan (shlomi@betamark.com)

#include <arpa/inet.h>
#include <cstdint>
#include <gtest/gtest.h>
#include <iostream>
#include <string>

#include "dns/parser.h"
#include "dns/types.h"
#include "network/buffer.h"

using namespace Dns;

TEST(dns_parser_tests, Parse_A_RecordCorrectly) {
    // DNS response payload for www.example.com (A)
    const unsigned char dns_response[] {
        0xab, 0xcd, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03,
        0x77, 0x77, 0x77, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63,
        0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x00, 0x1a, 0xfb, 0x00, 0x04, 0x5d, 0xb8, 0xd8, 0x22,
    };

    Buffer buffer {(const char*)dns_response, sizeof(dns_response)};
    Parser parser {0xABCD, buffer};

    EXPECT_EQ(parser.getOpcode(), OPCODE_QUERY);
    EXPECT_EQ(parser.getRcode(), RCODE_NOERROR);
    EXPECT_EQ(parser.getId(), 0xABCD);
    EXPECT_EQ(parser.getQuestionCount(), 1);
    EXPECT_EQ(parser.getQuestionType(), TYPE_A);
    EXPECT_EQ(parser.getHostname(), "www.example.com");
    EXPECT_EQ(parser.getAnswerCount(), 1);
    EXPECT_EQ(parser.recordToString(parser.getAnswers()[0]), "93.184.216.34");
}

TEST(dns_parser_tests, Parse_AAAA_RecordCorrectly) {
    // DNS response payload for example.com (AAAA)
    const unsigned char dns_response[] = {
        0x2b, 0xa8, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
        0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00,
        0x00, 0x4e, 0x87, 0x00, 0x10, 0x26, 0x06, 0x28, 0x00, 0x02, 0x20, 0x00,
        0x01, 0x02, 0x48, 0x18, 0x93, 0x25, 0xc8, 0x19, 0x46};

    Buffer buffer {(const char*)dns_response, sizeof(dns_response)};
    Parser parser {0x2BA8, buffer};

    EXPECT_EQ(parser.getOpcode(), OPCODE_QUERY);
    EXPECT_EQ(parser.getRcode(), RCODE_NOERROR);
    EXPECT_EQ(parser.getId(), 0x2BA8);
    EXPECT_EQ(parser.getQuestionCount(), 1);
    EXPECT_EQ(parser.getQuestionType(), TYPE_AAAA);
    EXPECT_EQ(parser.getHostname(), "example.com");
    EXPECT_EQ(parser.getAnswerCount(), 1);
    EXPECT_EQ(
        parser.recordToString(parser.getAnswers()[0]),
        "2606:2800:220:1:248:1893:25c8:1946"
    );
}

TEST(dns_parser_tests, Parse_MX_RecordCorrectly) {
    // DNS response payload for github.com (MX)
    const unsigned char dns_response[] = {
        0xb9, 0x5c, 0x81, 0x80, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x06,
        0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x0f,
        0x00, 0x01, 0xc0, 0x0c, 0x00, 0x0f, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x9e, 0x00,
        0x13, 0x00, 0x01, 0x05, 0x61, 0x73, 0x70, 0x6d, 0x78, 0x01, 0x6c, 0x06, 0x67,
        0x6f, 0x6f, 0x67, 0x6c, 0x65, 0xc0, 0x13, 0xc0, 0x0c, 0x00, 0x0f, 0x00, 0x01,
        0x00, 0x00, 0x0a, 0x9e, 0x00, 0x09, 0x00, 0x05, 0x04, 0x61, 0x6c, 0x74, 0x31,
        0xc0, 0x2a, 0xc0, 0x0c, 0x00, 0x0f, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x9e, 0x00,
        0x09, 0x00, 0x05, 0x04, 0x61, 0x6c, 0x74, 0x32, 0xc0, 0x2a, 0xc0, 0x0c, 0x00,
        0x0f, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x9e, 0x00, 0x09, 0x00, 0x0a, 0x04, 0x61,
        0x6c, 0x74, 0x33, 0xc0, 0x2a, 0xc0, 0x0c, 0x00, 0x0f, 0x00, 0x01, 0x00, 0x00,
        0x0a, 0x9e, 0x00, 0x09, 0x00, 0x0a, 0x04, 0x61, 0x6c, 0x74, 0x34, 0xc0, 0x2a,
    };

    Buffer buffer {(const char*)dns_response, sizeof(dns_response)};
    Parser parser {0xB95C, buffer};

    EXPECT_EQ(parser.getOpcode(), OPCODE_QUERY);
    EXPECT_EQ(parser.getRcode(), RCODE_NOERROR);
    EXPECT_EQ(parser.getId(), 0xB95C);
    EXPECT_EQ(parser.getQuestionCount(), 1);
    EXPECT_EQ(parser.getQuestionType(), TYPE_MX);
    EXPECT_EQ(parser.getHostname(), "github.com");
    EXPECT_EQ(parser.getAnswerCount(), 5);

    EXPECT_EQ(parser.recordToString(parser.getAnswers()[0]), "1 aspmx.l.google.com");
    EXPECT_EQ(parser.recordToString(parser.getAnswers()[1]), "5 alt1.aspmx.l.google.com");
    EXPECT_EQ(parser.recordToString(parser.getAnswers()[2]), "5 alt2.aspmx.l.google.com");
    EXPECT_EQ(parser.recordToString(parser.getAnswers()[3]), "10 alt3.aspmx.l.google.com");
    EXPECT_EQ(parser.recordToString(parser.getAnswers()[4]), "10 alt4.aspmx.l.google.com");
}

TEST(dns_parser_tests, ThrowsIDMismatch) {
    // DNS response payload for www.example.com (A)
    const unsigned char dns_response[] {
        0xab, 0xcd, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03,
        0x77, 0x77, 0x77, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63,
        0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x00, 0x1a, 0xfb, 0x00, 0x04, 0x5d, 0xb8, 0xd8, 0x22,
    };
    Buffer buffer {(const char*)dns_response, sizeof(dns_response)};

    EXPECT_THROW({
        auto p = Parser(0xABCC, buffer);
    }, IDMismatch);
}

TEST(dns_parser_tests, ThrowsMessageIsTooShort) {
    const unsigned char dns_response[] = {0xab, 0xcd};
    Buffer buffer {(const char*)dns_response, sizeof(dns_response)};

    EXPECT_THROW({
        auto p = Parser(0xABCD, buffer);
    }, MessageIsTooShort);
}

TEST(dns_parser_tests, ThrowsMessageIsTruncated) {
    // DNS response payload with truncated message
    const unsigned char dns_response[] = {
        0x2b, 0xa8, 0x83, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
        0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00,
        0x00, 0x4e, 0x87, 0x00, 0x10, 0x26, 0x06, 0x28, 0x00, 0x02, 0x20, 0x00,
        0x01, 0x02, 0x48, 0x18, 0x93, 0x25, 0xc8, 0x19, 0x46};
    Buffer buffer {(const char*)dns_response, sizeof(dns_response)};

    EXPECT_THROW({
        auto p = Parser(0x2BA8, buffer);
    }, MessageIsTruncated);
}

TEST(dns_parser_tests, ThrowsInvalidAnswerType) {
    std::uint8_t invalid_type = 0x03;
    // Invalid DNS response payload for www.example.com
    const unsigned char dns_response[] {
        0xab, 0xcd, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x77, 0x77, 0x77, 0x07, 0x65, 0x78, 0x61,
        0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00,
        0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, invalid_type, 0x00, 0x01, 0x00,
        0x00, 0x1a, 0xfb, 0x00, 0x04, 0x5d, 0xb8, 0xd8, 0x22,
    };

    Buffer buffer {(const char*)dns_response, sizeof(dns_response)};
    Parser parser {0xABCD, buffer};

    EXPECT_THROW({
        auto str = parser.recordToString(parser.getAnswers()[0]);
    }, InvalidAnswerType);
}